JavaScript : 


	执行环境:
			执行前和执行后:

				每个执行环境都有一个与之关联的变量对象。环境中定义的所有变量和对象在这个里面。代码无法访问。
				解析器可以。全局执行环境是最外围的一个执行环境，根据宿主不同，执行环境对象不一样，web borwer 为的执行环境对象是window,所有变量和对象及方法都在这个对象上。 

				每个函数都有一个执行环境，当执行函数时，函数环境被推入环境栈，执行完后，栈弹出函数环境，控制权给返回给之前的执行环境

			执行时: 
				code在环境中执行时，会创建变量对象(除全局环境，自动包含arguments对象)的一个scope chain : 
				保证执行环境有权访问所有变量及函数的有序访问。作用链的前端始终是当前执行环境的变量对象，
				如果是函数环境，将活动对象作为变量对象。scope chain的下一个是包含的外部环境，在下一个是
				下一个包含环境，直到全局环境的变量对象，始终在最后一个。

				标识符解析是通过scope chain前端开始搜索直到全局变量对象。找不到就error。

				var color = "blue";

				function changeColor(){
					var anotherColor = "red";
					function swapColors()
					{
						var tempColor = anotherColor;
						anotherColor = color;
						color = tempColor;

						//可以访问anotherColor/color/tempColor
					}

					//不能访问tempColor
				}

				changeColor 的scope chain : 自己的变量对象和全局的变量对象。函数内部的color能访问是能在链上找到。

				上面代码3个执行环境:
					全局环境:有一个color和changeColor
					changeColor局部环境:有anotherColor和swapColors
					swapColors局部环境:只有tempColor

				scope chain :

					window
						color
						changeColor()
							anotherColor
							swapColors()
								tempColor

					只能向上搜索访问，是线性的，有次序的。类似于原型链，只能是向上查找。变量声明会添加到最近的执行环境中。除了this和arguments，它们只是在当前actvieobject 上面查找。

					!!!:都会延长scope chain，并在前端加一个变量对象
						try{...}catch(error){} :创建全新变量对象，包含的是error对象声明
						with(param){} : 添加指定param对象，变量对象包含param的所有值，并加入到前端。

	闭包 : 	(包含整个函数的活动对象，可以将不用的对象置null。)
			指的是有权访问另一个函数作用域中的变量的函数，常见是在一个函数内创建另一个函数。

			当一个函数第一次被调用时，会创建一个执行环境和scope chain，并把scope chain赋值给一个特殊的内部属性Scope,然后用this,arguments及其它命名参数值初始化函数的活动对象。scope chain中，外部函数的活动对象始终处理第二位。。。。

			var result = compare(5,10)
			function compare(val1,val2)
			{
				if(val1 < val2)
				{
					return -1;
				}else if(val1 > val2)
				{
					return 1;
				}else
				{
					return 0;
				}
			}

			当compare创建时，会创建一个包含全局变量对象的scope chain，并将scope chain 保存在内部的scope属性中。
			先创建好。第一次调用compare(),创建新的执行环境，复制之前compare的内部scope属性中的对象，构建compare scope chain,然后创建包含val1/val2/this/arguments的activaction object并被推入scope chain前端,全局环境的变量对象包含this/result/compare , 在compare执行环境的scope chain里面处理于第二。活动对象只在执行过程中存在。当compare
			创建时，会创建一个包含全局变量对象的scope chain，并将scope chain 保存在内部的scope属性中。

			compare execution context (compare执行环境) = //创建compare时就被放到scope里面
			{
				[Scope Chain] = [
					activation_object : //执行compare时被推入前端//执行后就被删除了。内存中保存全局变量对象。
					{
						arguments : [5 , 10]
						val1 : 5 ,
						val2 : 10,
						this : compare : compare execution context (compare执行环境):自身
					},

					variable_object : 
					{
						compare : compare execution context (compare执行环境):自身
						result : undefined
					}
				]
			}
			
			闭包就不同了:
				闭包函数会将包含它的函数的activation object添加到自身的scope chain。因此可以访问外部函数的值。
				例:

				var compareNames = createComparisonFunction("name");
				var result = compareNames({name : "Nicholas"},{name : "Greg"});

				function createComparisonFunction(name){
					return function(obj1,obj2){
						var val1 = obj1[name];
						var val2 = obj2[name];

						if(val1 < val2)
						{
							return -1;
						}else if(val1 > val2)
						{
							return 1;
						}else
						{
							return 0;
						}
					}
				}

				--------------------------------scope_chain------------------------------
				var createComparisonFunction_activation_object = 
				{
					arguments : ["name"],
					name : "name"
				}

				var  global_variable_object =  
				{
					createComparisonFunction : 引用 上面的(执行环境)
					result : undefined
				}

				new(每次都是新的) createComparisonFunction exection context(执行环境) = 
				{
					scope_chain : 
					{
						scope_chain : 
						[
							activeaction_object : createComparisonFunction_activation_object,
							variable_object : global_variable_object
						]
					}
				}

				new anoymous(匿名) exection context = 
				{
					scope_chain : {
						closure(封闭)_activation_object : 
						{
							arguments : [{name : "Nicholas"},{name : "Greg"}],
							obj1 : {name : "Nicholas"},
							obj2 : {name : "Greg"}
						},
						activeaction_object : createComparisonFunction_activation_object,
						variable_object : global_variable_object
					}
				}

				上面两个执行环境中都保留了相同的activeaction_object和variable_object。匿名函数里面不保留了两个活动对象。

				不管是活动对象还是变量对象还是scope_chain都是引用类型的。


	scope chain 机制副作用: 闭包只能取得包含函数的任何变量的最后的值。引用值。
		function create()
		{
			var vals = [];
			for(var i = 0;i < 10 ; i++)
			{
				varls[i] = function(){
					return i;//实际上每个函数都是10，因为闭包提i，这个函数的执行环境会保存外部activation_object，是引用保存。当月外部函数执行完了。i = 10。那 activation_object的i就会变成10。
				}

				/*这样就没有问题:将i值传递到匿名函数内并执行了这个函数。里面的匿名函数就会保存活动对象。在scope
				chain链上查找时，首先会找到外部活动对象i。
				vals[i] = function(i){
					return function(){return i};
				}(i);

				另一种错误情况：外部对象没有i，但arguments里面有。这样也是找不到的。argumetns是类数组方式。没有i这个名称。

				vals[i] = function(){
					console.log(arguments[0])
					return function(){return i};
				}(i);
				*/
			}

			return vals;
		}


	this ：this是基于运行时执行环境绑定的，不能改变。当函数被对象调用是，this就是那个对象。this的查找是在当前执行activaction对象查找，这个不会到其它的活动对象查找，这个this在执行时已经被确认了。不能动态改变这个this。

	arguments同理

	如果要使用，可以使用变更占位缓存。

		var name = "window";
		var object = 
		{
			name : "object",
			getNameFunc : function(){
				console.log(this.name); // out object
				return function(){ return this.name;}; // out window
			}
		}



Bower 事件:
		事件捕获阶段 1 2 3
		处于目标阶段 4
		事件冒泡阶段 5 6 7 8

		1 window or document 8

		2 html 7

		3 body 6 

		4 div 5

		只能在后面两个阶段处理事件入口。
		事件function里面的this指向dom对象。因为是在dom作用域上运行

		通过js bind 事件比dom bind更好。

		DOM0 级 
			bind方式	
				on...
			unbind
				on... = null 
		DOM2 级 ....		
			bind 
				addEventListener(name,function,true 捕获阶段调用 : false 冒泡阶段调用)
			unbind
				removeEventListener()//必须使用和绑定时相同参数。


		IE :
			attachEvent(on + name,function) 只能在冒泡 并且this指向的是window
			detachEvent
			event在window下面，srcElemetn和target相同。

		<body>
			<div></div>
		</body>
		body和div都onclick
		this 和 currentTarget都是body。
		target是div，才是目标元素。


		event 事件对象:
				type : 事件类型
						可以根据type处理不同内容

						div.onclick = bind;
						div.onkeyup = bind;
						div.onmouseover = bind;

						function bind(e){
							e.type...
						}

				preventDefault() : 取消默认行为，前提是cancelable=true;a 默认行为是连接到href。
				stoppropagation() : 阻止冒泡
				wheelDelta : 正数上，负责下。

	事件类型
		load/unload
		error : js error在window上面触发，img object内嵌出错。
		resize : 
		select : input/texterea 选择text
		scroll : 

		鼠标事件和触发顺序:
		mousedown : 任意按下鼠标按钮触发，不能是键盘。
		mouseup : 用户释放鼠标按钮，不能是键盘。。
		click : 先触发mousedown和mouseup后，在触发click。
		dbclick : 两次click后触发。

		mousewheel : event.wheelDelta  

		键盘事件:
		keydown : 按下任务键触发。不放会重复触发。
		keypress : 按下任意字符键触发。不放会重复触发。






http://www.w3cfuns.com/blog-5461135-5403544.html
http://www.w3cfuns.com/portal.php?mod=topic&topicid=13
http://www.w3cfuns.com/thread-5592317-1-1.html
