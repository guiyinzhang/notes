  /**
   * Encryption is buffer based.
   * If there is enough room in {@link #inBuffer}, then write to this buffer.
   * If {@link #inBuffer} is full, then do encryption and write data to the
   * underlying stream.
   * @param b the data.
   * @param off the start offset in the data.
   * @param len the number of bytes to write.
   * @throws IOException
   */
public synchronized void write(byte[] b, int off, int len) throws IOException {
    checkStream();
    if (b == null) {
        throw new NullPointerException();
    } else if (off < 0 || len < 0 || off > b.length ||
        len > b.length - off) {
        throw new IndexOutOfBoundsException();
    }
    //循环对b操作。
    //inBuffer的初始cap为4096
    while (len > 0) {
        //可读和可写索引值
        final int remaining = inBuffer.remaining();

        //如果写入的长度 小于 缓冲区可写长度（pos-> limting 个数）
        //缓冲区可以一次写入len的b的数据。
        if (len < remaining) {
            //将b中off位置到len写入缓冲区
            inBuffer.put(b, off, len);

            //写完了，b中没有可写到buffer里面的数据了。结束while
            len = 0;
        } else {
            //部分写入off到remaining的b的数据到buffer，buffer已经满了。
            inBuffer.put(b, off, remaining);
            //将b的off加remaing，因为off之前的已经写到buffer了，没有用了下次写就写off后面的。
            off += remaining;
            //已经写了remaining长度的b数据了，剩下的就是off到len的数据。
            len -= remaining;

            //加密
            encrypt();
        }
    }
}






/**
   * Decryption is buffer based.
   * If there is data in {@link #outBuffer}, then read it out of this buffer.
   * If there is no data in {@link #outBuffer}, then read more from the
   * underlying stream and do the decryption.
   * @param b the buffer into which the decrypted data is read.
   * @param off the buffer offset.
   * @param len the maximum number of decrypted data bytes to read.
   * @return int the total number of decrypted data bytes read into the buffer.
   * @throws IOException
   */
  @Override
  public int read(byte[] b, int off, int len) throws IOException {
    checkStream();
    if (b == null) {
      throw new NullPointerException();
    } else if (off < 0 || len < 0 || len > b.length - off) {
      throw new IndexOutOfBoundsException();
    } else if (len == 0) {
      return 0;
    }

    final int remaining = outBuffer.remaining();
    if (remaining > 0) {
      int n = Math.min(len, remaining);
      outBuffer.get(b, off, n);
      return n;
    } else {
      int n = 0;

      /*
       * Check whether the underlying stream is {@link ByteBufferReadable},
       * it can avoid bytes copy.
       */
      if (usingByteBufferRead == null) {
        if (isByteBufferReadable || isReadableByteChannel) {
          try {
            n = isByteBufferReadable ?
                ((ByteBufferReadable) in).read(inBuffer) :
                  ((ReadableByteChannel) in).read(inBuffer);
            usingByteBufferRead = Boolean.TRUE;
          } catch (UnsupportedOperationException e) {
            usingByteBufferRead = Boolean.FALSE;
          }
        } else {
          usingByteBufferRead = Boolean.FALSE;
        }
        if (!usingByteBufferRead) {
          n = readFromUnderlyingStream(inBuffer);
        }
      } else {
        if (usingByteBufferRead) {
          n = isByteBufferReadable ? ((ByteBufferReadable) in).read(inBuffer) :
                ((ReadableByteChannel) in).read(inBuffer);
        } else {
          n = readFromUnderlyingStream(inBuffer);
        }
      }
      if (n <= 0) {
        return n;
      }

      streamOffset += n; // Read n bytes
      decrypt(decryptor, inBuffer, outBuffer, padding);
      padding = afterDecryption(decryptor, inBuffer, streamOffset, iv);
      n = Math.min(len, outBuffer.remaining());
      outBuffer.get(b, off, n);
      return n;
    }
  }
/**
 * CryptoInputStream解密数据。它不是线程安全的。
 *AES CTR模式是必需的，以确保该明文，密文具有1：1
 *映射。解密是一个基于缓冲区。解密的关键点
 *是：（1）通过计算流位置计数器和（2）填充：
 *<P />
 *计数器=基地+ POS/（算法块大小）;
 *填充= POS％（算法块大小）;
 *<P />
 *基础流偏移量保持为状态。
 */
